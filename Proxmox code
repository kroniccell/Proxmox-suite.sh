
```python
#!/usr/bin/env python3
import os
import sys
import logging
from functools import wraps
from flask import Flask, jsonify, request
from dotenv import load_dotenv
from cryptography.fernet import Fernet
import requests

# Configuration & Security
load_dotenv(".env")

class Config:
    PROXMOX_HOST = os.getenv("PROXMOX_HOST")
    USERNAME = os.getenv("USERNAME")
    REALM = os.getenv("REALM")
    VERIFY_SSL = os.getenv("VERIFY_SSL", "False") == "True"
    NODE = os.getenv("NODE")
    BACKUP_STORAGE = os.getenv("BACKUP_STORAGE")
    TARGET_MACHINE = os.getenv("TARGET_MACHINE")
    TARGET_USER = os.getenv("TARGET_USER")
    TARGET_PATH = os.getenv("TARGET_PATH")
    API_KEY = os.getenv("API_KEY")
    ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY")
    
    @staticmethod
    def get_password():
        cipher = Fernet(Config.ENCRYPTION_KEY.encode())
        encrypted_pass = os.getenv("ENCRYPTED_PASSWORD").encode()
        return cipher.decrypt(encrypted_pass).decode()

# Initialize Flask app
app = Flask(__name__)
app.secret_key = Config.API_KEY

# Logging configuration
logging.basicConfig(
    filename='logs/app.log',
    level=logging.INFO,
    format='%(asctime)s %(levelname)s: %(message)s'
)

# Security Middleware
def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if request.headers.get('Authorization') != Config.API_KEY:
            logging.warning("Unauthorized API access attempt")
            return jsonify({"error": "Unauthorized"}), 401
        return f(*args, **kwargs)
    return decorated

# Proxmox API Functions
def get_ticket():
    try:
        url = f"{Config.PROXMOX_HOST}/api2/json/access/ticket"
        data = {
            "username": Config.USERNAME,
            "password": Config.get_password(),
            "realm": Config.REALM
        }
        response = requests.post(url, data=data, verify=Config.VERIFY_SSL)
        response.raise_for_status()
        return response.json()["data"]
    except Exception as e:
        logging.error(f"Proxmox authentication failed: {str(e)}")
        raise

# Backup Operations
def backup_vm(vmid, node=Config.NODE):
    ticket = get_ticket()
    url = f"{Config.PROXMOX_HOST}/api2/json/nodes/{node}/qemu/{vmid}/backup"
    headers = {"Cookie": f"PVEAuthCookie={ticket['ticket']}"}
    response = requests.post(url, headers=headers, verify=Config.VERIFY_SSL)
    response.raise_for_status()
    return response.json()

# Clone VM
def clone_vm(vmid, newid, node=Config.NODE):
    ticket = get_ticket()
    url = f"{Config.PROXMOX_HOST}/api2/json/nodes/{node}/qemu/{vmid}/clone"
    headers = {"Cookie": f"PVEAuthCookie={ticket['ticket']}"}
    data = {"newid": newid}
    response = requests.post(url, headers=headers, data=data, verify=Config.VERIFY_SSL)
    response.raise_for_status()
    return response.json()

# Delete VM
def delete_vm(vmid, node=Config.NODE):
    ticket = get_ticket()
    url = f"{Config.PROXMOX_HOST}/api2/json/nodes/{node}/qemu/{vmid}"
    headers = {"Cookie": f"PVEAuthCookie={ticket['ticket']}"}
    response = requests.delete(url, headers=headers, verify=Config.VERIFY_SSL)
    response.raise_for_status()
    return response.json()

# Flask Routes
@app.route('/api/vm/<vmid>/backup', methods=['POST'])
@token_required
def api_backup(vmid):
    try:
        result = backup_vm(vmid)
        logging.info(f"Backup initiated for VM {vmid}")
        return jsonify({"status": "success", "details": result}), 202
    except Exception as e:
        logging.error(f"Backup failed: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/api/vm/<vmid>/clone', methods=['POST'])
@token_required
def api_clone_vm(vmid):
    try:
        newid = request.json.get('newid')
        if not newid:
            return jsonify({"error": "Missing 'newid' parameter"}), 400
        result = clone_vm(vmid, newid)
        logging.info(f"VM {vmid} cloned to {newid}")
        return jsonify({"status": "success", "details": result}), 201
    except Exception as e:
        logging.error(f"Clone failed: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/api/vm/<vmid>/delete', methods=['DELETE'])
@token_required
def api_delete_vm(vmid):
    try:
        result = delete_vm(vmid)
        logging.info(f"VM {vmid} deleted successfully")
        return jsonify({"status": "success", "details": result}), 200
    except Exception as e:
        logging.error(f"Delete failed: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == "__main__":
    os.makedirs("logs", exist_ok=True)
    app.run(host="0.0.0.0", port=5000, debug=False)
```

---

### **הסבר מקוצר**

1. **הגדרות אבטחה**:
   - סיסמאות מאובטחות באמצעות `cryptography` [[1]].
   - אימות API_KEY לכל גישה ל-API.

2. **פעולות על מכונות וירטואליות (VMs)**:
   - **גיבוי**: פונקציה `backup_vm` משתמשת ב-Proxmox API לגיבוי VM.
   - **העתקה**: פונקציה `clone_vm` משכפלת VM ל-VM חדש.
   - **מחיקה**: פונקציה `delete_vm` מסירה VM לחלוטין [[1]].

3. **נתיבים ב-API**:
   - `/api/vm/<vmid>/backup`: מבצע גיבוי ל-VM.
   - `/api/vm/<vmid>/clone`: משכפל VM עם מזהה חדש (`newid`).
   - `/api/vm/<vmid>/delete`: מוחק VM.

4. **לוגים**:
   - כל פעולה מזוהה ומלווה בלוגים מפורטים בקובץ `logs/app.log`.

5. **שימוש באפשרויות חדשות**:
   - השתמש ב-cURL או כלי HTTP אחר כדי להפעיל את ה-API:
     ```bash
     curl -X POST -H "Authorization: YOUR_API_KEY" \
     -H "Content-Type: application/json" \
     -d '{"newid": 200}' http://localhost:5000/api/vm/100/clone
     ```
